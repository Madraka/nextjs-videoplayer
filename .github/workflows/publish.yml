name: Build, Release & Publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Type check
      run: pnpm run type-check || echo "Type check completed"
    
    - name: Lint
      run: pnpm run lint || echo "Linting completed"
    
    - name: Build package
      run: pnpm run build:package
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Build package
      run: pnpm run build:package
    
    - name: Get package version
      id: package-version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
    
    - name: Check if tag exists
      id: check-tag
      run: |
        if git rev-parse "v${{ steps.package-version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      if: steps.check-tag.outputs.exists == 'false'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.package-version.outputs.version }}
        name: Release v${{ steps.package-version.outputs.version }}
        body: |
          ## ðŸŽ¬ NextJS Video Player v${{ steps.package-version.outputs.version }}
          
          ### Features
          - Modern video player for Next.js applications
          - HLS.js & Dash.js adaptive streaming support
          - Mobile-first responsive design
          - ShadCN UI + Tailwind CSS integration
          - Plugin architecture for extensibility
          
          ### Installation
          ```bash
          npm install @nextjs-videoplayer/core@${{ steps.package-version.outputs.version }}
          # or from GitHub
          npm install github:Madraka/nextjs-videoplayer#v${{ steps.package-version.outputs.version }}
          ```
          
          ### Quick Start
          ```tsx
          import { ConfigurableVideoPlayer } from '@nextjs-videoplayer/core';
          
          <ConfigurableVideoPlayer
            src="https://example.com/video.m3u8"
            aspectRatio="16/9"
          />
          ```
        draft: false
        prerelease: false
        files: |
          dist/**/*
          README.md
          CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Publish to NPM
      if: steps.check-tag.outputs.exists == 'false'
      run: |
        if [ "${{ secrets.NPM_TOKEN }}" != "" ]; then
          npm publish --access public
        else
          echo "NPM_TOKEN not set, skipping NPM publish"
        fi
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-on-tag:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Build package
      run: pnpm run build:package
    
    - name: Publish to NPM
      run: |
        if [ "${{ secrets.NPM_TOKEN }}" != "" ]; then
          npm publish --access public
        else
          echo "NPM_TOKEN not set, skipping NPM publish"
        fi
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
